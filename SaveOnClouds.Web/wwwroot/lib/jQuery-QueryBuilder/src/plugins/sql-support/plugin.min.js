/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/jQuery-QueryBuilder@2.5.2/src/plugins/sql-support/plugin.js
 * 
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
function getStmtConfig(e){var n=e.match(/(question_mark|numbered|named)(?:\((.)\))?/);return n||(n=[null,"question_mark",void 0]),n}QueryBuilder.define("sql-support",function(e){},{boolean_as_integer:!0}),QueryBuilder.defaults({sqlOperators:{equal:{op:"= ?"},not_equal:{op:"!= ?"},in:{op:"IN(?)",sep:", "},not_in:{op:"NOT IN(?)",sep:", "},less:{op:"< ?"},less_or_equal:{op:"<= ?"},greater:{op:"> ?"},greater_or_equal:{op:">= ?"},between:{op:"BETWEEN ?",sep:" AND "},not_between:{op:"NOT BETWEEN ?",sep:" AND "},begins_with:{op:"LIKE(?)",mod:"{0}%"},not_begins_with:{op:"NOT LIKE(?)",mod:"{0}%"},contains:{op:"LIKE(?)",mod:"%{0}%"},not_contains:{op:"NOT LIKE(?)",mod:"%{0}%"},ends_with:{op:"LIKE(?)",mod:"%{0}"},not_ends_with:{op:"NOT LIKE(?)",mod:"%{0}"},is_empty:{op:"= ''"},is_not_empty:{op:"!= ''"},is_null:{op:"IS NULL"},is_not_null:{op:"IS NOT NULL"}},sqlRuleOperator:{"=":function(e){return{val:e,op:""===e?"is_empty":"equal"}},"!=":function(e){return{val:e,op:""===e?"is_not_empty":"not_equal"}},LIKE:function(e){return"%"==e.slice(0,1)&&"%"==e.slice(-1)?{val:e.slice(1,-1),op:"contains"}:"%"==e.slice(0,1)?{val:e.slice(1),op:"ends_with"}:"%"==e.slice(-1)?{val:e.slice(0,-1),op:"begins_with"}:void Utils.error("SQLParse",'Invalid value for LIKE operator "{0}"',e)},"NOT LIKE":function(e){return"%"==e.slice(0,1)&&"%"==e.slice(-1)?{val:e.slice(1,-1),op:"not_contains"}:"%"==e.slice(0,1)?{val:e.slice(1),op:"not_ends_with"}:"%"==e.slice(-1)?{val:e.slice(0,-1),op:"not_begins_with"}:void Utils.error("SQLParse",'Invalid value for NOT LIKE operator "{0}"',e)},IN:function(e){return{val:e,op:"in"}},"NOT IN":function(e){return{val:e,op:"not_in"}},"<":function(e){return{val:e,op:"less"}},"<=":function(e){return{val:e,op:"less_or_equal"}},">":function(e){return{val:e,op:"greater"}},">=":function(e){return{val:e,op:"greater_or_equal"}},BETWEEN:function(e){return{val:e,op:"between"}},"NOT BETWEEN":function(e){return{val:e,op:"not_between"}},IS:function(e){return null!==e&&Utils.error("SQLParse","Invalid value for IS operator"),{val:null,op:"is_null"}},"IS NOT":function(e){return null!==e&&Utils.error("SQLParse","Invalid value for IS operator"),{val:null,op:"is_not_null"}}},sqlStatements:{question_mark:function(){var e=[];return{add:function(n,t){return e.push(t),"?"},run:function(){return e}}},numbered:function(e){(!e||e.length>1)&&(e="$");var n=0,t=[];return{add:function(r,o){return t.push(o),e+ ++n},run:function(){return t}}},named:function(e){(!e||e.length>1)&&(e=":");var n={},t={};return{add:function(r,o){n[r.field]||(n[r.field]=1);var i=r.field+"_"+n[r.field]++;return t[i]=o,e+i},run:function(){return t}}}},sqlRuleStatement:{question_mark:function(e){var n=0;return{parse:function(t){return"?"==t?e[n++]:t},esc:function(e){return e.replace(/\?/g,"'?'")}}},numbered:function(e,n){(!n||n.length>1)&&(n="$");var t=new RegExp("^\\"+n+"[0-9]+$"),r=new RegExp("\\"+n+"([0-9]+)","g");return{parse:function(n){return t.test(n)?e[n.slice(1)-1]:n},esc:function(e){return e.replace(r,"'"+("$"==n?"$$":n)+"$1'")}}},named:function(e,n){(!n||n.length>1)&&(n=":");var t=new RegExp("^\\"+n),r=new RegExp("\\"+n+"("+Object.keys(e).join("|")+")","g");return{parse:function(n){return t.test(n)?e[n.slice(1)]:n},esc:function(e){return e.replace(r,"'"+("$"==n?"$$":n)+"$1'")}}}}}),QueryBuilder.extend({getSQL:function(e,n,t){if(!(t=void 0===t?this.getRules():t))return null;n=n?"\n":" ";var r=this.getPluginOptions("sql-support","boolean_as_integer");if(!0===e&&(e="question_mark"),"string"==typeof e){var o=getStmtConfig(e);e=this.settings.sqlStatements[o[1]](o[2])}var i=this,s=function t(o){if(o.condition||(o.condition=i.settings.default_condition),-1===["AND","OR"].indexOf(o.condition.toUpperCase())&&Utils.error("UndefinedSQLCondition",'Unable to build SQL query with condition "{0}"',o.condition),!o.rules)return"";var s=[];o.rules.forEach(function(o){if(o.rules&&o.rules.length>0)s.push("("+n+t(o)+n+")"+n);else{var l=i.settings.sqlOperators[o.operator],a=i.getOperatorByType(o.operator),u="";void 0===l&&Utils.error("UndefinedSQLOperator",'Unknown SQL operation for operator "{0}"',o.operator),0!==a.nb_inputs&&(o.value instanceof Array||(o.value=[o.value]),o.value.forEach(function(n,t){t>0&&(u+=l.sep),"boolean"==o.type&&r?n=n?1:0:e||"integer"===o.type||"double"===o.type||"boolean"===o.type||(n=Utils.escapeString(n)),l.mod&&(n=Utils.fmt(l.mod,n)),e?u+=e.add(o,n):("string"==typeof n&&(n="'"+n+"'"),u+=n)}));var p=function(e){return l.op.replace("?",function(){return e})},c=i.change("getSQLField",o.field,o)+" "+p(u);s.push(i.change("ruleToSQL",c,o,u,p))}});var l=s.join(" "+o.condition+n);return i.change("groupToSQL",l,o)}(t);return e?{sql:s,params:e.run()}:{sql:s}},getRulesFromSQL:function(e,n){"SQLParser"in window||Utils.error("MissingLibrary","SQLParser is required to parse SQL queries. Get it here https://github.com/mistic100/sql-parser");var t=this;if("string"==typeof e&&(e={sql:e}),!0===n&&(n="question_mark"),"string"==typeof n){var r=getStmtConfig(n);n=this.settings.sqlRuleStatement[r[1]](e.params,r[2])}n&&(e.sql=n.esc(e.sql)),0!==e.sql.toUpperCase().indexOf("SELECT")&&(e.sql="SELECT * FROM table WHERE "+e.sql);var o=SQLParser.parse(e.sql);o.where||Utils.error("SQLParse","No WHERE clause found");var i=t.change("parseSQLNode",o.where.conditions);if("rules"in i&&"condition"in i)return i;if("id"in i&&"operator"in i&&"value"in i)return{condition:this.settings.default_condition,rules:[i]};var s=t.change("sqlToGroup",{condition:this.settings.default_condition,rules:[]},i),l=s;return function e(r,o){if(null!==r)if("rules"in(r=t.change("parseSQLNode",r))&&"condition"in r)l.rules.push(r);else if("id"in r&&"operator"in r&&"value"in r)l.rules.push(r);else if("left"in r&&"right"in r&&"operation"in r||Utils.error("SQLParse","Unable to parse WHERE clause"),-1!==["AND","OR"].indexOf(r.operation.toUpperCase())){if(t.change("sqlGroupsDistinct",o>0&&l.condition!=r.operation.toUpperCase(),l,r,o)){var i=t.change("sqlToGroup",{condition:t.settings.default_condition,rules:[]},r);l.rules.push(i),l=i}l.condition=r.operation.toUpperCase(),o++;var s=l;e(r.left,o),l=s,e(r.right,o)}else{var a;$.isPlainObject(r.right.value)&&Utils.error("SQLParse","Value format not supported for {0}.",r.left.value),a=$.isArray(r.right.value)?r.right.value.map(function(e){return e.value}):r.right.value,n&&(a=$.isArray(a)?a.map(n.parse):n.parse(a));var u=r.operation.toUpperCase();"<>"==u&&(u="!=");var p=t.settings.sqlRuleOperator[u];void 0===p&&Utils.error("UndefinedSQLOperator",'Invalid SQL operation "{0}".',r.operation);var c,f=p.call(this,a,r.operation);"values"in r.left?c=r.left.values.join("."):"value"in r.left?c=r.left.value:Utils.error("SQLParse","Cannot find field name in {0}",JSON.stringify(r.left));var d=t.getSQLFieldID(c,a),v=t.change("sqlToRule",{id:d,field:c,operator:f.op,value:f.val},r);l.rules.push(v)}}(i,0),s},setRulesFromSQL:function(e,n){this.setRules(this.getRulesFromSQL(e,n))},getSQLFieldID:function(e,n){var t=this.filters.filter(function(n){return n.field.toLowerCase()===e.toLowerCase()});return 1===t.length?t[0].id:this.change("getSQLFieldID",e,n)}});
//# sourceMappingURL=/sm/95cc97af97f53ee5a200480e84e337c2658fb652d09cd081923103163ced23df.map