/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/jQuery-QueryBuilder@2.5.2/src/plugins/not-group/plugin.js
 * 
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
QueryBuilder.define("not-group",function(e){var o=this;this.on("afterInit",function(){o.$el.on("click.queryBuilder","[data-not=group]",function(){var e=$(this).closest(QueryBuilder.selectors.group_container),t=o.getModel(e);t.not=!t.not}),o.model.on("update",function(e,t,n){t instanceof Group&&"not"===n&&o.updateGroupNot(t)})}),this.on("afterAddGroup",function(e,o){o.__.not=!1}),e.disable_template||this.on("getGroupTemplate.filter",function(t){var n=$(t.value);n.find(QueryBuilder.selectors.condition_container).prepend('<button type="button" class="btn btn-xs btn-default" data-not="group"><i class="'+e.icon_unchecked+'"></i> '+o.translate("NOT")+"</button>"),t.value=n.prop("outerHTML")}),this.on("groupToJson.filter",function(e,o){e.value.not=o.not}),this.on("jsonToGroup.filter",function(e,o){e.value.not=!!o.not}),this.on("groupToSQL.filter",function(e,o){o.not&&(e.value="NOT ( "+e.value+" )")}),this.on("parseSQLNode.filter",function(e){e.value.name&&"NOT"==e.value.name.toUpperCase()&&(e.value=e.value.arguments.value[0],-1===["AND","OR"].indexOf(e.value.operation.toUpperCase())&&(e.value=new SQLParser.nodes.Op(o.settings.default_condition,e.value,null)),e.value.not=!0)}),this.on("sqlGroupsDistinct.filter",function(e,o,t,n){t.not&&n>0&&(e.value=!0)}),this.on("sqlToGroup.filter",function(e,o){e.value.not=!!o.not}),this.on("groupToMongo.filter",function(e,o){var t="$"+o.condition.toLowerCase();o.not&&e.value[t]&&(e.value={$nor:[e.value]})}),this.on("parseMongoNode.filter",function(e){var o=Object.keys(e.value);"$nor"==o[0]&&(e.value=e.value[o[0]][0],e.value.not=!0)}),this.on("mongoToGroup.filter",function(e,o){e.value.not=!!o.not})},{icon_unchecked:"glyphicon glyphicon-unchecked",icon_checked:"glyphicon glyphicon-check",disable_template:!1}),Utils.defineModelProperties(Group,["not"]),QueryBuilder.selectors.group_not=QueryBuilder.selectors.group_header+" [data-not=group]",QueryBuilder.extend({updateGroupNot:function(e){var o=this.plugins["not-group"];e.$el.find(">"+QueryBuilder.selectors.group_not).toggleClass("active",e.not).find("i").attr("class",e.not?o.icon_checked:o.icon_unchecked),this.trigger("afterUpdateGroupNot",e),this.trigger("rulesChanged")}});
//# sourceMappingURL=/sm/e1516c0dfed001065a04eaa10912c28da76f006256435601e42250c373f4a1a4.map